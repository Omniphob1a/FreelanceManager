version: '3.8'

services:
  # -------------------
  # Users API
  # -------------------
  users-api:
    build:
      context: ./Users
      dockerfile: Users.Api/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__UsersDbContext=Server=users-db;Port=5432;Database=users;User Id=postgres;Password=123;
      - Hangfire__Storage__ConnectionString=Server=hangfire-db;Port=5432;Database=hangfire;User Id=postgres;Password=123;
      - Kafka__BootstrapServers=kafka:9092
      - Kafka__GroupId=users-service
    volumes:
      - ${USERPROFILE}/.nuget/packages:/root/.nuget/packages
    depends_on:
      users-db:
        condition: service_started
      hangfire-db:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy

  # -------------------
  # Projects API
  # -------------------
  projects-api:
    build:
      context: ./Projects
      dockerfile: Projects.Api/Dockerfile
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__ProjectsDbContext=Server=projects-db;Port=5432;Database=projects;User Id=postgres;Password=123;
      - Hangfire__Storage__ConnectionString=Server=hangfire-db;Port=5432;Database=hangfire;User Id=postgres;Password=123;
      - Kafka__BootstrapServers=kafka:9092
      - Kafka__GroupId=projects-service
    volumes:
      - ${USERPROFILE}/.nuget/packages:/root/.nuget/packages
    depends_on:
      projects-db:
        condition: service_started
      hangfire-db:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy

  # -------------------
  # Tasks API
  # -------------------
  tasks-api:
    build:
      context: ./Tasks
      dockerfile: Tasks.Api/Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__ProjectTasksDbContext=Server=projects-db;Port=5432;Database=tasks;User Id=postgres;Password=123;
      - Kafka__BootstrapServers=kafka:9092
      - Kafka__GroupId=tasks-service
    volumes:
      - ${USERPROFILE}/.nuget/packages:/root/.nuget/packages
    depends_on:
      projects-db:
        condition: service_started
      hangfire-db:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy

  # -------------------
  # Gateway
  # -------------------
  gateway:
    build:
      context: ./Gateway
      dockerfile: Gateway/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - Kafka__BootstrapServers=kafka:9092
    depends_on:
      users-api:
        condition: service_started
      projects-api:
        condition: service_started
      tasks-api:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy

  # -------------------
  # Frontend
  # -------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - API_URL=http://gateway:8080
    depends_on:
      gateway:
        condition: service_started

  # -------------------
  # Hangfire DB
  # -------------------
  hangfire-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: hangfire
    ports:
      - "5434:5432"
    volumes:
      - hangfire_pgdata:/var/lib/postgresql/data

  # -------------------
  # Users DB
  # -------------------
  users-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: users
    ports:
      - "5433:5432"
    volumes:
      - users_pgdata:/var/lib/postgresql/data

  # -------------------
  # Projects DB
  # -------------------
  projects-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: projects
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  # -------------------
  # Redis
  # -------------------
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -------------------
  # RedisInsight (UI)
  # -------------------
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    restart: unless-stopped
    ports:
      - "8001:5540"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - redisinsight_data:/db

  # -------------------
  # Zookeeper
  # -------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  # -------------------
  # Kafka Broker
  # -------------------
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=kafka:9092"]
      interval: 10s
      timeout: 10s
      retries: 10

  # -------------------
  # Kafka UI
  # -------------------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - users-api
      - projects-api
      - tasks-api

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  pgdata:
  users_pgdata:
  hangfire_pgdata:
  redisinsight_data: {}
